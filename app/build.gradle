/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */
 
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    maven {
        url 'https://repo1.maven.org/maven2/'
    }
    mavenCentral()
}

dependencies {

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.directory.studio:org.apache.mina.core:2.0.7'
    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'  // 这是一个简单的实现，可以用于快速开始
    implementation 'org.mozilla:rhino:1.7.13'
}

application {
    // Define the main class for the application.
    mainClass = 'server.Start'
    // mainClass = 'gui.RoyMS'
// }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Add a task to build a JAR file that can be run with 'java -jar'
task buildJar(type: Jar) {
    archiveFileName.set('myapp.jar')
    archiveBaseName.set('myapp')
    archiveVersion.set('1.0')
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'server.Start',
        // attributes 'Main-Class': 'gui.RoyMS',
                   'Class-Path': configurations.runtimeClasspath.files.collect { "lib/" + it.name }.join(' ')
    }
    
    // Specify the output directory for buildJar as 'dist' in the project directory
    destinationDirectory.set(file('../dist'))

    // Copy all jar files from configurations.runtimeClasspath to ../dist/lib directory
    copy {
        from configurations.runtimeClasspath
        into file('../dist/lib')
    }
}

assemble.dependsOn(buildJar)
